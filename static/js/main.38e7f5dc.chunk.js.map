{"version":3,"sources":["api.ts","atom.ts","components/CandleChart.tsx","components/LineChart.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["fetchCoins","a","fetch","process","json","coinId","fetchOHLCvalue","endDate","Math","floor","Date","now","startDate","isDarkMode","atom","key","default","CandleChart","useQuery","refetchInterval","isLoading","data","apexCandleOpt","theme","mode","useRecoilValue","chart","background","height","type","plotOptions","candlestick","colors","upward","downward","tooltip","enabled","xaxis","labels","style","fontSize","yaxis","opposite","apexCandleSeries","name","map","ele","x","time_close","split","y","open","high","low","close","toFixed","options","series","LineChart","apexLineOpt","width","toolbar","show","grid","stroke","curve","axisBorder","axisTicks","categories","price","fill","gradient","gradientToColors","stops","formatter","value","apexLineSeries","RadioLabel","styled","label","RadioSelChart","input","attrs","Chart","useState","chartSel","setChartSel","chgChart","event","currentTarget","checked","onChange","Price","Container","div","Header","header","Title","h1","props","accentColor","Overview","OverviewItem","Description","p","Loader","span","Tabs","Tab","isActive","textColor","Coin","useParams","priceMatch","useMatch","chartMatch","state","useLocation","fetchCoinInfo","isInfoLoading","coinInfo","fetchCoinPrice","isPriceLoading","priceInfo","loading","rank","symbol","quotes","USD","description","total_supply","max_supply","to","path","element","CoinList","ul","li","cardBgColor","Img","img","P","Coins","isDarkModeSet","useSetRecoilState","onClick","prev","slice","coin","id","src","toLowerCase","Router","basename","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","isDark","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"0OAAO,SAAeA,IAAtB,+B,4CAAO,sBAAAC,EAAA,sEACiBC,MAAM,GAAD,OAAIC,iCAAJ,WADtB,8BACmEC,OADnE,oF,kEAIA,WAA6BC,GAA7B,SAAAJ,EAAA,sEACiBC,MAAM,GAAD,OAAIC,iCAAJ,kBAA4CE,IADlE,8BAC6ED,OAD7E,oF,kEAIA,WAA8BC,GAA9B,SAAAJ,EAAA,sEACiBC,MAAM,GAAD,OAAIC,iCAAJ,oBAA8CE,IADpE,8BAC+ED,OAD/E,oF,sBAIA,SAAeE,EAAtB,kC,4CAAO,WAA8BD,GAA9B,iBAAAJ,EAAA,6DACGM,EAAUC,KAAKC,MAAMC,KAAKC,MAAQ,KAClCC,EAAYL,EAAU,QAFzB,SAIOL,MAAM,GAAD,OACJC,iCADI,kBACoCE,EADpC,mCACqEO,EADrE,gBACsFL,IALlG,8BAODH,OAPC,oF,0DCVMS,EAAaC,YAAK,CAC3BC,IAAK,WACLC,SAAS,I,OC6EEC,MA1Ef,YAA8C,IAAvBZ,EAAsB,EAAtBA,OAAsB,EACba,mBAAuB,CAAC,QAAS,UAAU,kBAAMZ,EAAeD,KAAS,CACjGc,gBAAiB,MADbC,EADiC,EACjCA,UAAWC,EADsB,EACtBA,KAKbC,EAAwB,CAC1BC,MAAO,CACHC,KAHOC,YAAeZ,GAGP,OAAS,SAE5Ba,MAAO,CACHC,WAAY,cACZC,OAAQ,IACRC,KAAM,eAGVC,YAAa,CACTC,YAAa,CACTC,OAAQ,CACJC,OAAQ,UACRC,SAAU,aAItBC,QAAS,CACLC,SAAS,GAEbC,MAAO,CACHR,KAAM,WACNS,OAAQ,CACJC,MAAO,CACHC,SAAU,OACVR,OAAQ,UAIpBS,MAAO,CACHC,UAAU,EACVP,QAAS,CACLC,SAAS,GAEbE,OAAQ,CACJC,MAAO,CACHP,OAAQ,WAKlBW,EAA6B,CAC/B,CACIC,KAAM,SACNvB,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMwB,KAAI,SAACC,GAAD,MAAU,CACtBC,EAAGD,EAAIE,WAAWC,MAAM,KAAK,GAC7BC,EAAG,CAACJ,EAAIK,KAAML,EAAIM,KAAMN,EAAIO,IAAKP,EAAIQ,OAAOT,KAAI,SAACC,GAAD,OAASA,EAAIS,QAAQ,YAKjF,OACI,8BACKnC,EACG,sBAEA,cAAC,IAAD,CACIoC,QAASlC,EACTmC,OAAQd,EACRd,KAAK,cACLD,OAAQ,SCTb8B,I,IAAAA,EA1Df,YAA4C,IAAvBrD,EAAsB,EAAtBA,OAAsB,EACXa,mBAAuB,CAAC,QAAS,SAAS,kBAAMZ,EAAeD,KAAS,CAChGc,gBAAiB,MADbC,EAD+B,EAC/BA,UAAWC,EADoB,EACpBA,KAKbsC,EAAsB,CACxBpC,MAAO,CACHC,KAHOC,YAAeZ,GAGP,OAAS,SAE5Ba,MAAO,CACHE,OAAQ,IACRgC,MAAO,IACPC,QAAS,CACLC,MAAM,GAEVnC,WAAY,eAEhBoC,KAAM,CAAED,MAAM,GACdE,OAAQ,CACJC,MAAO,SACPL,MAAO,GAEXnB,MAAO,CACHqB,MAAM,GAEVzB,MAAO,CACH6B,WAAY,CAAEJ,MAAM,GACpBK,UAAW,CAAEL,MAAM,GACnBxB,OAAQ,CAAEwB,MAAM,GAChBjC,KAAM,WACNuC,WAAU,OAAE/C,QAAF,IAAEA,OAAF,EAAEA,EAAMwB,KAAI,SAACwB,GAAD,OAAWA,EAAMrB,eAE3CsB,KAAM,CACFzC,KAAM,WACN0C,SAAU,CAAEC,iBAAkB,CAAC,WAAYC,MAAO,CAAC,EAAG,OAE1DzC,OAAQ,CAAC,WACTG,QAAS,CACLe,EAAG,CACCwB,UAAW,SAACC,GAAD,iBAAuBA,EAAMpB,QAAQ,QAItDqB,EAA2B,CAC7B,CACIhC,KAAM,QACNvB,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMwB,KAAI,SAACwB,GAAD,OAAWA,EAAMf,WAIzC,OACI,8BACKlC,EAAY,mBAAqB,cAAC,IAAD,CAAYoC,QAASG,EAAaF,OAAQmB,OCvDlFC,EAAaC,IAAOC,MAAV,oDAGVC,EAAgBF,IAAOG,MAAMC,MAAM,CAAErD,KAAM,QAASe,KAAM,YAA1CkC,CAAH,0BA0CJK,MAzBf,YAAwC,IAAvB9E,EAAsB,EAAtBA,OAAsB,EACH+E,mBAAS,UADN,mBAC5BC,EAD4B,KAClBC,EADkB,KAG7BC,EAAW,SAACC,GAAgD,IAEzCb,EACjBa,EADAC,cAAiBd,MAErBW,EAAYX,IAGhB,OACI,gCACI,eAACE,EAAD,WACI,cAACG,EAAD,CAAeL,MAAM,SAASe,QAAsB,WAAbL,EAAuBM,SAAUJ,IAD5E,YAIA,eAACV,EAAD,WACI,cAACG,EAAD,CAAeL,MAAM,OAAOe,QAAsB,SAAbL,EAAqBM,SAAUJ,IADxE,UAIc,WAAbF,EAAwB,cAAC,EAAD,CAAahF,OAAQA,IAAa,cAAC,EAAD,CAAWA,OAAQA,QCzC3EuF,I,kBAAAA,EAJf,WACI,OAAO,wCCOLC,EAAYf,IAAOgB,IAAV,8FAMTC,EAASjB,IAAOkB,OAAV,2HAONC,EAAQnB,IAAOoB,GAAV,mEAEE,SAACC,GAAD,OAAWA,EAAM5E,MAAM6E,eAG9BC,EAAWvB,IAAOgB,IAAV,mLAORQ,EAAexB,IAAOgB,IAAV,4PAWZS,EAAczB,IAAO0B,EAAV,mDAIXC,EAAS3B,IAAO4B,KAAV,0EAKNC,EAAO7B,IAAOgB,IAAV,mIAOJc,EAAM9B,IAAO4B,KAAV,0RASI,SAACP,GAAD,OAAYA,EAAMU,SAAWV,EAAM5E,MAAM6E,YAAcD,EAAM5E,MAAMuF,aA4JjEC,I,wBAAAA,GA3Ef,WAAiB,IAAD,MACJ1G,EAAW2G,cAAX3G,OACF4G,EAAaC,YAAS,GAAD,OAAI7G,EAAJ,WACrB8G,EAAaD,YAAS,GAAD,OAAI7G,EAAJ,WACrB+G,EAAQC,cAAcD,MAJhB,EAMyClG,mBAAgB,CAACb,EAAQ,aAAa,kBNxJxF,SAAP,kCMyJQiH,CAAcjH,MADCkH,EANP,EAMJnG,UAAgCoG,EAN5B,EAMsBnG,KANtB,EAS2CH,mBACnD,CAACb,EAAQ,cACT,kBNzJD,SAAP,kCMyJcoH,CAAepH,KACrB,CACIc,gBAAiB,MAJNuG,EATP,EASJtG,UAAiCuG,EAT7B,EASuBtG,KAQ7BuG,EAAUL,GAAiBG,EAEjC,OACI,eAAC7B,EAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,iCAAa,OAALuB,QAAK,IAALA,OAAA,EAAAA,EAAOxE,MAAOwE,EAAMxE,KAAOgF,EAAU,aAAH,OAAkBJ,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAU5E,WAG9E,cAACmD,EAAD,UACI,cAACE,EAAD,WAAa,OAALmB,QAAK,IAALA,OAAA,EAAAA,EAAOxE,MAAOwE,EAAMxE,KAAOgF,EAAU,aAAH,OAAkBJ,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAU5E,SAEzEgF,EACG,cAACnB,EAAD,yBAEA,qCACI,eAACJ,EAAD,WACI,eAACC,EAAD,WACI,yCACA,sCAAOkB,QAAP,IAAOA,OAAP,EAAOA,EAAUK,UAErB,eAACvB,EAAD,WACI,2CACA,4CAAQkB,QAAR,IAAQA,OAAR,EAAQA,EAAUM,aAEtB,eAACxB,EAAD,WACI,0CACA,4CAAQqB,QAAR,IAAQA,GAAR,UAAQA,EAAWI,cAAnB,iBAAQ,EAAmBC,WAA3B,iBAAQ,EAAwB3D,aAAhC,aAAQ,EAA+Bd,QAAQ,YAGvD,cAACgD,EAAD,iBAAciB,QAAd,IAAcA,OAAd,EAAcA,EAAUS,cACxB,eAAC5B,EAAD,WACI,eAACC,EAAD,WACI,gDACA,sCAAOqB,QAAP,IAAOA,OAAP,EAAOA,EAAWO,kBAEtB,eAAC5B,EAAD,WACI,+CACA,sCAAOqB,QAAP,IAAOA,OAAP,EAAOA,EAAWQ,mBAG1B,eAACxB,EAAD,WACI,cAACC,EAAD,CAAKC,SAAyB,OAAfI,EAAf,SACI,cAAC,IAAD,CAAMmB,GAAG,QAAT,qBAEJ,cAACxB,EAAD,CAAKC,SAAyB,OAAfM,EAAf,SACI,cAAC,IAAD,CAAMiB,GAAG,QAAT,wBAGR,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,QAAQC,QAAS,cAAC,EAAD,MAC7B,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,CAAOjI,OAAQA,gBClN9DwF,GAAYf,IAAOgB,IAAV,gGAMTC,GAASjB,IAAOkB,OAAV,6HAONuC,GAAWzD,IAAO0D,GAAV,4BAERzB,GAAOjC,IAAO2D,GAAV,2WACc,SAACtC,GAAD,OAAWA,EAAM5E,MAAMmH,eAClC,SAACvC,GAAD,OAAWA,EAAM5E,MAAMuF,aAYf,SAACX,GAAD,OAAWA,EAAM5E,MAAM6E,eAKtCH,GAAQnB,IAAOoB,GAAV,qEAEE,SAACC,GAAD,OAAWA,EAAM5E,MAAM6E,eAG9BK,GAAS3B,IAAO4B,KAAV,4EAKNiC,GAAM7D,IAAO8D,IAAV,4FAMHC,GAAI/D,IAAO0B,EAAV,oDAiDQsC,OAnCf,WAAkB,IAAD,EACe5H,mBAAkB,WAAYlB,GAAlDoB,EADK,EACLA,UAAWC,EADN,EACMA,KACb0H,EAAgBC,YAAkBnI,GAGxC,OACI,eAAC,GAAD,WACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,qDAGR,eAAC,GAAD,WACI,cAAC,GAAD,2BACA,wBAAQoI,QAXH,kBAAMF,GAAc,SAACG,GAAD,OAAWA,MAWpC,0BAEH9H,EACG,cAAC,GAAD,qCAEA,cAACmH,GAAD,iBACKlH,QADL,IACKA,OADL,EACKA,EAAM8H,MAAM,EAAG,IAAItG,KAAI,SAACuG,GAAD,OACpB,cAAC,GAAD,UACI,eAAC,IAAD,CAAMhB,GAAE,WAAMgB,EAAKC,IAAMjC,MAAO,CAAExE,KAAMwG,EAAKxG,MAA7C,UACI,cAAC+F,GAAD,CACIW,IAAG,qDAAgDF,EAAKtB,OAAOyB,iBAEnE,eAACV,GAAD,WAAIO,EAAKxG,KAAT,iBALGwG,EAAKC,aC7EzBG,I,GAAAA,GAXf,WACI,OACI,cAAC,IAAD,CAAeC,SAAUtJ,iBAAzB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOkI,KAAK,IAAIC,QAAS,cAAC,GAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,aAAaC,QAAS,cAAC,GAAD,Y,SCRrCoB,GAA0B,CACnCC,QAAS,UACT7C,UAAW,QACXV,YAAa,UACbsC,YAAa,eAGJkB,GAA2B,CACpCD,QAAS,aACT7C,UAAW,QACXV,YAAa,UACbsC,YAAa,SCLXmB,GAAcC,YAAH,2mDAyDO,SAAC3D,GAAD,OAAWA,EAAM5E,MAAMoI,WACnC,SAACxD,GAAD,OAAWA,EAAM5E,MAAMuF,aAwBpBiD,OAdf,WACI,IAAMC,EAASvI,YAAeZ,GAE9B,OACI,mCACI,eAAC,IAAD,CAAeU,MAAOyI,EAASN,GAAYE,GAA3C,UACI,cAACC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,sBAAD,UC9EVI,GAAc,IAAIC,cAExBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,sBAAD,CAAqBC,OAAQL,GAA7B,SACI,cAAC,GAAD,UAIZM,SAASC,eAAe,W","file":"static/js/main.38e7f5dc.chunk.js","sourcesContent":["export async function fetchCoins() {\n    return await (await fetch(`${process.env.REACT_APP_BASE_URL}/coins`)).json();\n}\n\nexport async function fetchCoinInfo(coinId: string) {\n    return await (await fetch(`${process.env.REACT_APP_BASE_URL}/coins/${coinId}`)).json();\n}\n\nexport async function fetchCoinPrice(coinId: string) {\n    return await (await fetch(`${process.env.REACT_APP_BASE_URL}/tickers/${coinId}`)).json();\n}\n\nexport async function fetchOHLCvalue(coinId: string) {\n    const endDate = Math.floor(Date.now() / 1000);\n    const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n    return await (\n        await fetch(\n            `${process.env.REACT_APP_BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n        )\n    ).json();\n}\n","import { atom } from 'recoil';\n\nexport const isDarkMode = atom({\n    key: 'darkMode',\n    default: false,\n});\n","import ApexCharts from 'react-apexcharts';\nimport { useQuery } from 'react-query';\nimport { useRecoilValue } from 'recoil';\nimport { fetchOHLCvalue } from '../api';\nimport { isDarkMode } from '../atom';\nimport { ChartProps, IOHLCvalue } from '../routes/Chart';\n\nfunction CandleChart({ coinId }: ChartProps) {\n    const { isLoading, data } = useQuery<IOHLCvalue[]>(['ohlcv', 'chart'], () => fetchOHLCvalue(coinId), {\n        refetchInterval: 5000,\n    });\n\n    const isDark = useRecoilValue(isDarkMode);\n    const apexCandleOpt: object = {\n        theme: {\n            mode: isDark ? 'dark' : 'light',\n        },\n        chart: {\n            background: 'transparent',\n            height: 350,\n            type: 'candlestick',\n        },\n\n        plotOptions: {\n            candlestick: {\n                colors: {\n                    upward: '#a29bfe',\n                    downward: '#00b894',\n                },\n            },\n        },\n        tooltip: {\n            enabled: true,\n        },\n        xaxis: {\n            type: 'category',\n            labels: {\n                style: {\n                    fontSize: '10px',\n                    colors: '#fff',\n                },\n            },\n        },\n        yaxis: {\n            opposite: true,\n            tooltip: {\n                enabled: true,\n            },\n            labels: {\n                style: {\n                    colors: '#fff',\n                },\n            },\n        },\n    };\n    const apexCandleSeries: object[] = [\n        {\n            name: 'Candle',\n            data: data?.map((ele) => ({\n                x: ele.time_close.split('T')[0],\n                y: [ele.open, ele.high, ele.low, ele.close].map((ele) => ele.toFixed(2)),\n            })),\n        },\n    ];\n\n    return (\n        <div>\n            {isLoading ? (\n                'Chart is Loading...'\n            ) : (\n                <ApexCharts\n                    options={apexCandleOpt}\n                    series={apexCandleSeries}\n                    type=\"candlestick\"\n                    height={350}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default CandleChart;\n","import ApexCharts from 'react-apexcharts';\nimport { useQuery } from 'react-query';\nimport { useRecoilValue } from 'recoil';\nimport { fetchOHLCvalue } from '../api';\nimport { isDarkMode } from '../atom';\nimport { ChartProps, IOHLCvalue } from '../routes/Chart';\n\nfunction LineChart({ coinId }: ChartProps) {\n    const { isLoading, data } = useQuery<IOHLCvalue[]>(['ohlcv', 'line'], () => fetchOHLCvalue(coinId), {\n        refetchInterval: 5000,\n    });\n\n    const isDark = useRecoilValue(isDarkMode);\n    const apexLineOpt: object = {\n        theme: {\n            mode: isDark ? 'dark' : 'light',\n        },\n        chart: {\n            height: 300,\n            width: 500,\n            toolbar: {\n                show: false,\n            },\n            background: 'transparent',\n        },\n        grid: { show: false },\n        stroke: {\n            curve: 'smooth',\n            width: 4,\n        },\n        yaxis: {\n            show: false,\n        },\n        xaxis: {\n            axisBorder: { show: false },\n            axisTicks: { show: false },\n            labels: { show: false },\n            type: 'datetime',\n            categories: data?.map((price) => price.time_close),\n        },\n        fill: {\n            type: 'gradient',\n            gradient: { gradientToColors: ['#0be881'], stops: [0, 100] },\n        },\n        colors: ['#0fbcf9'],\n        tooltip: {\n            y: {\n                formatter: (value: number) => `$${value.toFixed(2)}`,\n            },\n        },\n    };\n    const apexLineSeries: object[] = [\n        {\n            name: 'Price',\n            data: data?.map((price) => price.close),\n        },\n    ];\n\n    return (\n        <div>\n            {isLoading ? 'Chart is Loading' : <ApexCharts options={apexLineOpt} series={apexLineSeries} />}\n        </div>\n    );\n}\n\nexport default LineChart;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CandleChart from '../components/CandleChart';\nimport LineChart from '../components/LineChart';\n\nconst RadioLabel = styled.label`\n    margin-right: 5px;\n`;\nconst RadioSelChart = styled.input.attrs({ type: 'radio', name: 'chartBtn' })``;\n\nexport interface IOHLCvalue {\n    time_open: string;\n    time_close: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    volume: number;\n    market_cap: number;\n}\n\nexport interface ChartProps {\n    coinId: string;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n    const [chartSel, setChartSel] = useState('candle');\n\n    const chgChart = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const {\n            currentTarget: { value },\n        } = event;\n        setChartSel(value);\n    };\n\n    return (\n        <div>\n            <RadioLabel>\n                <RadioSelChart value=\"candle\" checked={chartSel === 'candle'} onChange={chgChart} />\n                Candle\n            </RadioLabel>\n            <RadioLabel>\n                <RadioSelChart value=\"line\" checked={chartSel === 'line'} onChange={chgChart} />\n                Line\n            </RadioLabel>\n            {chartSel === 'candle' ? <CandleChart coinId={coinId} /> : <LineChart coinId={coinId} />}\n        </div>\n    );\n}\n\nexport default Chart;\n","function Price() {\n    return <h1>Price</h1>;\n}\n\nexport default Price;\n","import { useQuery } from 'react-query';\nimport { useLocation, useParams, Route, Routes, Link, useMatch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { fetchCoinInfo, fetchCoinPrice } from '../api';\nimport Chart from './Chart';\nimport Price from './Price';\n\nconst Container = styled.div`\n    padding: 0 20px;\n    max-width: 480px;\n    margin: 0 auto;\n`;\n\nconst Header = styled.header`\n    height: 15vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Title = styled.h1`\n    font-size: 48px;\n    color: ${(props) => props.theme.accentColor};\n`;\n\nconst Overview = styled.div`\n    display: flex;\n    justify-content: space-between;\n    background-color: rgba(0, 0, 0, 0.5);\n    padding: 10px 20px;\n    border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    span:first-child {\n        font-size: 10px;\n        font-weight: 400;\n        text-transform: uppercase;\n        margin-bottom: 5px;\n    }\n`;\nconst Description = styled.p`\n    margin: 20px 0px;\n`;\n\nconst Loader = styled.span`\n    text-align: center;\n    display: block;\n`;\n\nconst Tabs = styled.div`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    margin: 25px 0px;\n    gap: 10px;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n    text-align: center;\n    text-transform: uppercase;\n    font-size: 12px;\n    font-weight: 400;\n    background-color: rgba(0, 0, 0, 0.5);\n    padding: 7px 0px;\n    border-radius: 10px;\n\n    color: ${(props) => (props.isActive ? props.theme.accentColor : props.theme.textColor)};\n    a {\n        display: block;\n    }\n`;\n\ninterface RouteState {\n    name: string;\n}\n\ninterface RouteParams {\n    coinId: string;\n}\n\ninterface ITags {\n    coin_counter: number;\n    ico_counter: number;\n    id: string;\n    name: string;\n}\n\ninterface IInfo {\n    id: string;\n    name: string;\n    symbol: string;\n    rank: number;\n    is_new: boolean;\n    is_active: boolean;\n    type: string;\n    tags: ITags[];\n    team: object;\n    description: string;\n    message: string;\n    open_source: boolean;\n    started_at: string;\n    development_status: string;\n    hardware_wallet: boolean;\n    proof_type: string;\n    org_structure: string;\n    hash_algorithm: string;\n    links: object;\n    links_extended: object;\n    whitepaper: object;\n    first_data_at: string;\n    last_data_at: string;\n}\n\ninterface IPrice {\n    id: string;\n    name: string;\n    symbol: string;\n    rank: number;\n    circulating_supply: number;\n    total_supply: number;\n    max_supply: number;\n    beta_value: number;\n    first_data_at: string;\n    last_updated: string;\n    quotes: {\n        USD: {\n            ath_date: string;\n            ath_price: number;\n            market_cap: number;\n            market_cap_change_24h: number;\n            percent_change_1h: number;\n            percent_change_1y: number;\n            percent_change_6h: number;\n            percent_change_7d: number;\n            percent_change_12h: number;\n            percent_change_15m: number;\n            percent_change_24h: number;\n            percent_change_30d: number;\n            percent_change_30m: number;\n            percent_from_price_ath: number;\n            price: number;\n            volume_24h: number;\n            volume_24h_change_24h: number;\n        };\n    };\n}\n\nfunction Coin() {\n    const { coinId } = useParams() as RouteParams;\n    const priceMatch = useMatch(`${coinId}/price`);\n    const chartMatch = useMatch(`${coinId}/chart`);\n    const state = useLocation().state as RouteState;\n\n    const { isLoading: isInfoLoading, data: coinInfo } = useQuery<IInfo>([coinId, 'coinInfo'], () =>\n        fetchCoinInfo(coinId)\n    );\n    const { isLoading: isPriceLoading, data: priceInfo } = useQuery<IPrice>(\n        [coinId, 'priceInfo'],\n        () => fetchCoinPrice(coinId),\n        {\n            refetchInterval: 5000,\n        }\n    );\n\n    const loading = isInfoLoading || isPriceLoading;\n\n    return (\n        <Container>\n            <HelmetProvider>\n                <Helmet>\n                    <title>{state?.name ? state.name : loading ? 'Loading...' : coinInfo?.name}</title>\n                </Helmet>\n            </HelmetProvider>\n            <Header>\n                <Title>{state?.name ? state.name : loading ? 'Loading...' : coinInfo?.name}</Title>\n            </Header>\n            {loading ? (\n                <Loader>Loading...</Loader>\n            ) : (\n                <>\n                    <Overview>\n                        <OverviewItem>\n                            <span>Rank:</span>\n                            <span>{coinInfo?.rank}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Symbol:</span>\n                            <span>${coinInfo?.symbol}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Price:</span>\n                            <span>${priceInfo?.quotes?.USD?.price?.toFixed(2)}</span>\n                        </OverviewItem>\n                    </Overview>\n                    <Description>{coinInfo?.description}</Description>\n                    <Overview>\n                        <OverviewItem>\n                            <span>Total Suply:</span>\n                            <span>{priceInfo?.total_supply}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Max Supply:</span>\n                            <span>{priceInfo?.max_supply}</span>\n                        </OverviewItem>\n                    </Overview>\n                    <Tabs>\n                        <Tab isActive={priceMatch !== null}>\n                            <Link to=\"price\">PRICE</Link>\n                        </Tab>\n                        <Tab isActive={chartMatch !== null}>\n                            <Link to=\"chart\">CHART</Link>\n                        </Tab>\n                    </Tabs>\n                    <Routes>\n                        <Route path=\"price\" element={<Price />} />\n                        <Route path=\"chart\" element={<Chart coinId={coinId} />} />\n                    </Routes>\n                </>\n            )}\n        </Container>\n    );\n}\nexport default Coin;\n","import { useQuery } from 'react-query';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { fetchCoins } from '../api';\nimport { useSetRecoilState } from 'recoil';\nimport { isDarkMode } from '../atom';\n\nconst Container = styled.div`\n    padding: 0 20px;\n    max-width: 480px;\n    margin: 0 auto;\n`;\n\nconst Header = styled.header`\n    height: 15vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst CoinList = styled.ul``;\n\nconst Coin = styled.li`\n    background-color: ${(props) => props.theme.cardBgColor};\n    color: ${(props) => props.theme.textColor};\n    border-radius: 15px;\n    margin-bottom: 20px;\n    border: 1px solid white;\n    a {\n        padding: 20px;\n        display: flex;\n        align-items: center;\n        transition: color 0.2s ease-in;\n    }\n    &:hover {\n        a {\n            color: ${(props) => props.theme.accentColor};\n        }\n    }\n`;\n\nconst Title = styled.h1`\n    font-size: 48px;\n    color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n    text-align: center;\n    display: block;\n`;\n\nconst Img = styled.img`\n    width: 35px;\n    height: 35px;\n    margin-right: 10px;\n`;\n\nconst P = styled.p`\n    margin-top: 5px;\n`;\n\ninterface ICoin {\n    id: string;\n    name: string;\n    symbol: string;\n    rank: number;\n    is_new: boolean;\n    is_active: boolean;\n    type: string;\n}\n\nfunction Coins() {\n    const { isLoading, data } = useQuery<ICoin[]>('allCoins', fetchCoins);\n    const isDarkModeSet = useSetRecoilState(isDarkMode);\n    const chgTheme = () => isDarkModeSet((prev) => !prev);\n\n    return (\n        <Container>\n            <HelmetProvider>\n                <Helmet>\n                    <title>코인</title>\n                </Helmet>\n            </HelmetProvider>\n            <Header>\n                <Title>코인</Title>\n                <button onClick={chgTheme}>Dark Mode</button>\n            </Header>\n            {isLoading ? (\n                <Loader>로딩 중...</Loader>\n            ) : (\n                <CoinList>\n                    {data?.slice(0, 20).map((coin) => (\n                        <Coin key={coin.id}>\n                            <Link to={`/${coin.id}`} state={{ name: coin.name }}>\n                                <Img\n                                    src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                                />\n                                <P>{coin.name} &rarr;</P>\n                            </Link>\n                        </Coin>\n                    ))}\n                </CoinList>\n            )}\n        </Container>\n    );\n}\nexport default Coins;\n","import { BrowserRouter, Route, Routes } from 'react-router-dom';\n\nimport Coin from './routes/Coin';\nimport Coins from './routes/Coins';\n\nfunction Router() {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Routes>\n                <Route path=\"/\" element={<Coins />} />\n                <Route path=\"/:coinId/*\" element={<Coin />} />\n            </Routes>\n        </BrowserRouter>\n    );\n}\n\nexport default Router;\n","import { DefaultTheme } from 'styled-components';\n\nexport const darkTheme: DefaultTheme = {\n    bgColor: '#2f3640',\n    textColor: 'white',\n    accentColor: '#9c88ff',\n    cardBgColor: 'transparent',\n};\n\nexport const lightTheme: DefaultTheme = {\n    bgColor: 'whitesmoke',\n    textColor: 'black',\n    accentColor: '#9c88ff',\n    cardBgColor: 'white',\n};\n","import Router from './Router';\nimport { createGlobalStyle } from 'styled-components';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './theme';\nimport { useRecoilValue } from 'recoil';\nimport { isDarkMode } from './atom';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, menu, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  main, menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n    display: block;\n  }\n  /* HTML5 hidden-attribute fix for newer browsers */\n  *[hidden] {\n      display: none;\n  }\n  body {\n    line-height: 1;\n  }\n  menu, ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  *{\n    box-sizing: border-box;\n  }\n\n  body{\n    font-weight: 300;\n    font-family: 'Source Sans Pro', sans-serif;\n    background-color: ${(props) => props.theme.bgColor};\n    color:${(props) => props.theme.textColor};\n    line-height: 1.2;\n  }\n\n  a{\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nfunction App() {\n    const isDark = useRecoilValue(isDarkMode);\n\n    return (\n        <>\n            <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n                <GlobalStyle />\n                <Router />\n                <ReactQueryDevtools />\n            </ThemeProvider>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <QueryClientProvider client={queryClient}>\n                <App />\n            </QueryClientProvider>\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}